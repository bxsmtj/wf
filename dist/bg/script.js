// DEFINE DIMENSIONS
let div = document.getElementById('wrapper');
let width = div.clientWidth;
let height = div.clientHeight;
const margin = { top: 0, right: 0, bottom: 0, left: 0 };

const rawData = [
	{ A: -0.064387135, B: -0.080873269 },
	{ A: 0.023071975, B: -0.028982095 },
	{ A: 0.03298027, B: 0.038029731 },
	{ A: 0.018818311, B: 0.015706689 },
	{ A: 0.014582413, B: 0.022982095 },
	{ A: 0.02144582, B: 0.045910983 },
	{ A: 0.054112223, B: 0.087512211 },
	{ A: -0.025383689, B: -0.039680422 },
	{ A: -0.057925949, B: -0.039195518 },
	{ A: -0.006325896, B: 0.052211616 },
	{ A: 0.041462973, B: 0.035763345 },
	{ A: -0.012181011, B: 0.009861283 },
	{ A: 0.043208654, B: 0.045811035 },
	{ A: -0.042480204, B: -0.085202335 },
	{ A: 0.043263483, B: 0.078528245 },
	{ A: 0.05615137, B: -0.089458162 },
	{ A: 0.038556997, B: 0.03755662 },
	{ A: 0.022864157, B: 0.0235976 },
	{ A: 0.003826529, B: -0.02263589 },
	{ A: -0.028348648, B: -0.044661921 },
	{ A: 0.053414663, B: 0.053681563 },
	{ A: 0.040382545, B: 0.05011281 },
	{ A: -0.055594686, B: -0.071606385 },
	{ A: 0.041904349, B: 0.043446316 },
	{ A: 0.037004389, B: 0.03015826 },
	{ A: -0.062219218, B: -0.089067531 },
	{ A: 0.035763781, B: 0.051190277 },
	{ A: 0.040556959, B: 0.046158576 },
	{ A: 0.012930464, B: 0.046431778 },
	{ A: -0.067897059, B: -0.077230414 },
	{ A: -0.020139627, B: 0.006938263 },
	{ A: 0.025184062, B: 0.028866506 },
	{ A: -0.033494451, B: 0.016621321 },
	{ A: -0.028504917, B: 0.013603355 },
	{ A: -0.06017651, B: -0.085785823 },
	{ A: 0.029519688, B: 0.016530128 },
	{ A: 0.025840556, B: 0.016097936 },
	{ A: -0.008356282, B: 0.023549888 },
	{ A: 0.056247687, B: 0.063126191 },
	{ A: -0.052545757, B: -0.002038034 },
	{ A: 0.050682809, B: 0.059988313 },
	{ A: -0.023065679, B: 0.021500579 },
	{ A: -0.008370171, B: -0.104402908 },
	{ A: 0.058235662, B: 0.0545825 },
	{ A: 0.037498697, B: 0.047112158 },
	{ A: -0.080175288, B: -0.078092575 },
	{ A: -0.074764214, B: -0.089722361 },
	{ A: -0.063978298, B: -0.054242675 },
	{ A: -0.012028372, B: 0.037423813 },
	{ A: 0.058906941, B: -0.023662418 },
	{ A: 0.010889388, B: 0.014606359 },
	{ A: 0.036305941, B: 0.035124853 },
	{ A: 0.024767945, B: 0.068347437 },
	{ A: 0.05677396, B: 0.062648819 },
	{ A: 0.00167742, B: 0.032706352 },
	{ A: 0.031218562, B: 0.039769973 },
	{ A: 0.053419243, B: 0.045490648 },
	{ A: -0.044455167, B: -0.05690757 },
	{ A: 0.026708843, B: 0.02680227 },
	{ A: 0.013311899, B: 0.020373958 },
	{ A: 0.047172677, B: 0.044869441 },
	{ A: 0.051141884, B: 0.06203533 },
	{ A: 0.031918699, B: 0.024479598 },
	{ A: -0.050829048, B: 0.016571873 },
	{ A: -0.067441411, B: -0.086708777 },
	{ A: 0.045043408, B: 0.032326234 },
	{ A: -0.035830582, B: -0.004306513 },
	{ A: -0.084237144, B: -0.096139231 },
	{ A: 0.03728092, B: 0.049117467 },
	{ A: 0.043743711, B: 0.041572275 },
	{ A: 0.02072868, B: 0.018882767 },
	{ A: 0.056167834, B: 0.067714148 },
	{ A: -0.071649554, B: -0.075899119 },
	{ A: 0.039273289, B: -0.047307425 },
	{ A: -0.02530156, B: -0.090032685 },
	{ A: 0.001493511, B: 0.044423811 },
	{ A: 0.041047952, B: 0.040694464 },
	{ A: 0.027317255, B: 0.027455241 },
	{ A: 0.019731232, B: -0.088195324 },
	{ A: -0.061388253, B: -0.089617779 },
	{ A: 0.036003182, B: 0.023981785 },
	{ A: -0.074791624, B: -0.007891814 },
	{ A: 0.039733858, B: 0.038741512 },
	{ A: 0.027380813, B: 0.036610729 },
	{ A: 0.027657425, B: 0.037537185 },
	{ A: 0.023095524, B: 0.047779981 },
	{ A: 0.030463761, B: 0.018515559 },
	{ A: -0.060609942, B: -0.080772117 },
	{ A: -0.07810964, B: -0.078948659 },
	{ A: 0.02571124, B: 0.036801758 },
	{ A: 0.048341945, B: 0.048003608 },
	{ A: -0.004433362, B: 0.031301579 },
	{ A: 0.0361336, B: -0.04406997 },
	{ A: 0.04363339, B: 0.056597116 },
	{ A: 0.040880055, B: -0.002258528 },
	{ A: -0.074916183, B: -0.074154149 },
	{ A: 0.04434191, B: -0.019413995 },
	{ A: 0.010672238, B: 0.026737843 },
	{ A: 0.018924535, B: 0.0000288 },
	{ A: 0.043267267, B: 0.037744337 },
	{ A: 0.026654137, B: 0.039356241 },
	{ A: 0.032720172, B: 0.033694266 },
	{ A: -0.094449469, B: -0.095955505 },
	{ A: 0.009127776, B: 0.010170939 },
	{ A: -0.008905459, B: -0.010194754 },
	{ A: 0.00869552, B: -0.037629628 },
	{ A: 0.032452625, B: 0.042922958 },
	{ A: -0.050276355, B: 0.007668736 },
	{ A: 0.036830623, B: 0.04485641 },
	{ A: 0.073676351, B: 0.050205864 },
	{ A: -0.074552794, B: -0.077020269 },
	{ A: 0.019208902, B: -0.011915244 },
	{ A: 0.048068711, B: 0.062176199 },
	{ A: 0.003265454, B: -0.078496719 },
	{ A: 0.032814712, B: 0.044759036 },
	{ A: 0.045789693, B: 0.030018585 },
	{ A: 0.032972077, B: 0.029094653 },
	{ A: -0.036943838, B: -0.113107885 },
	{ A: -0.061344272, B: -0.083412895 },
	{ A: -0.07050966, B: -0.082797015 },
	{ A: 0.069995608, B: 0.089528554 },
	{ A: 0.02244413, B: 0.00221709 },
	{ A: -0.05520982, B: -0.062797703 },
	{ A: -0.063570298, B: -0.083090652 },
	{ A: -0.058378915, B: -0.062635328 },
	{ A: 0.033611436, B: 0.041523058 },
	{ A: 0.031567526, B: 0.03367385 },
	{ A: -0.071289417, B: 0.029908306 },
	{ A: 0.053650499, B: 0.051635032 },
	{ A: 0.041639982, B: 0.040395203 },
	{ A: 0.024149766, B: 0.054808194 },
	{ A: 0.027239567, B: 0.034542933 },
	{ A: -0.019804439, B: 0.023393388 },
	{ A: 0.041121147, B: 0.043645621 },
	{ A: 0.035382962, B: 0.04759681 },
	{ A: 0.028709409, B: 0.030952924 },
	{ A: -0.093515384, B: -0.073593267 },
	{ A: 0.050676976, B: 0.056973875 },
	{ A: 0.014969267, B: 0.050108369 },
	{ A: 0.049717609, B: 0.05046589 },
	{ A: 0.022882221, B: 0.031838715 },
	{ A: -0.079274699, B: -0.075805088 },
	{ A: 0.018737772, B: 0.034244243 },
	{ A: 0.020823546, B: 0.071745225 },
	{ A: -0.041437015, B: -0.020270857 },
	{ A: -0.016695749, B: 0.01048606 },
	{ A: 0.044936425, B: 0.056897172 },
	{ A: 0.03748748, B: 0.035986105 },
	{ A: 0.038619193, B: 0.044393467 },
	{ A: -0.042611284, B: -0.054142094 },
	{ A: 0.042040674, B: 0.049008332 },
	{ A: -0.021088377, B: -0.052016657 },
	{ A: -0.100509834, B: -0.102514082 },
	{ A: 0.031402503, B: 0.029325932 },
	{ A: 0.032284313, B: 0.027518299 },
	{ A: -0.014680306, B: -0.031247372 },
	{ A: -0.041529579, B: -0.084172895 },
	{ A: -0.056239352, B: -0.064435432 },
	{ A: 0.028143736, B: 0.030149889 },
	{ A: 0.036099754, B: 0.023911372 },
	{ A: 0.047985163, B: 0.072936974 },
	{ A: 0.062613074, B: -0.01450042 },
	{ A: 0.04965677, B: 0.06911137 },
	{ A: 0.039322293, B: 0.03772177 },
	{ A: -0.034955288, B: -0.041013039 },
	{ A: -0.002049038, B: -0.048337745 },
	{ A: 0.011205603, B: 0.035928519 },
	{ A: 0.019020189, B: 0.056477695 },
	{ A: 0.058002468, B: 0.04314315 },
	{ A: 0.042971576, B: 0.057462916 },
	{ A: 0.033685547, B: -0.025760814 },
	{ A: 0.051465361, B: 0.051987091 },
	{ A: -0.045974971, B: 0.026180595 },
	{ A: -0.003996751, B: 0.045157211 },
	{ A: -0.093615651, B: -0.109067221 },
	{ A: -0.051052129, B: -0.083489879 },
	{ A: -0.005054425, B: 0.023539548 },
	{ A: -0.021707218, B: -0.039079039 },
	{ A: -0.073085919, B: -0.077161389 },
	{ A: 0.028073022, B: 0.018367601 },
	{ A: -0.082038925, B: -0.005078012 },
	{ A: -0.06108257, B: -0.07211593 },
	{ A: 0.047453016, B: 0.047660236 },
	{ A: 0.034296445, B: 0.029484105 },
	{ A: -0.061327018, B: -0.067042114 },
	{ A: -0.059822039, B: -0.063376852 },
	{ A: -0.078668538, B: -0.068500178 },
	{ A: -0.035928816, B: -0.006796708 },
	{ A: 0.018351481, B: 0.035598207 },
	{ A: -0.068234831, B: -0.083329284 },
	{ A: -0.070352288, B: -0.085039771 },
	{ A: 0.025896637, B: 0.060939107 },
	{ A: 0.037627011, B: 0.04411981 },
	{ A: -0.001308337, B: -0.051918769 },
	{ A: 0.048837026, B: 0.055627618 },
	{ A: 0.033236302, B: 0.035082816 },
	{ A: -0.054443312, B: 0.032997735 },
	{ A: 0.048385851, B: 0.049480781 },
	{ A: -0.008357502, B: -0.09005106 },
	{ A: -0.05113088, B: -0.057705879 },
	{ A: 0.041806475, B: 0.053601741 },
	{ A: -0.00185155, B: 0.036661876 },
	{ A: 0.050011852, B: 0.060821541 },
	{ A: -0.074980835, B: -0.084904176 },
	{ A: -0.080262579, B: -0.081427651 },
	{ A: -0.058894738, B: -0.068853366 },
	{ A: 0.050037237, B: -0.075337349 },
	{ A: -0.065034794, B: -0.075382308 },
	{ A: -0.041271925, B: -0.090982379 },
	{ A: -0.080526582, B: -0.083539026 },
	{ A: 0.022852478, B: 0.015058522 },
	{ A: 0.032860602, B: 0.024439385 },
	{ A: 0.016186496, B: -0.09086646 },
	{ A: -0.01055292, B: 0.030982143 },
	{ A: -0.068815462, B: -0.084936801 },
	{ A: -0.069423734, B: -0.082798344 },
	{ A: 0.028003701, B: 0.025381533 },
	{ A: -0.059869211, B: -0.08364888 },
	{ A: -0.022686633, B: -0.082605207 },
	{ A: 0.035765893, B: 0.044104384 },
	{ A: -0.008041861, B: 0.014343366 },
	{ A: 0.058107066, B: 0.070858786 },
	{ A: -0.077580213, B: -0.069780886 },
	{ A: 0.042823914, B: 0.046467688 },
	{ A: -0.06678316, B: -0.072320601 },
	{ A: -0.028771603, B: -0.007192032 },
	{ A: 0.069302744, B: 0.078357233 },
	{ A: 0.0502819, B: 0.026398734 },
	{ A: 0.044288679, B: 0.047662449 },
	{ A: 0.026522787, B: 0.028424634 },
	{ A: -0.07986584, B: -0.078741057 },
	{ A: -0.074560896, B: -0.075480411 },
	{ A: 0.030739172, B: 0.048097965 },
	{ A: -0.030353303, B: -0.022570257 },
	{ A: 0.039360604, B: 0.034342838 },
	{ A: 0.050566521, B: -0.045320603 },
	{ A: 0.045696682, B: 0.043033018 },
	{ A: 0.034601427, B: 0.019378507 },
	{ A: 0.054615387, B: 0.064069884 },
	{ A: -0.064305769, B: -0.071284079 },
	{ A: -0.062343231, B: -0.021217607 },
	{ A: 0.039338985, B: 0.047637715 },
	{ A: -0.027233827, B: -0.03027191 },
	{ A: -0.072000589, B: -0.075096356 },
	{ A: 0.031554296, B: 0.025854528 },
	{ A: 0.037768111, B: 0.037546653 },
	{ A: 0.025971019, B: 0.035945328 },
	{ A: -0.058387048, B: -0.067131986 },
	{ A: 0.000403776, B: -0.020675842 },
	{ A: 0.034447756, B: 0.032214449 },
	{ A: -0.054630661, B: -0.042556672 },
	{ A: 0.047692999, B: 0.058696284 },
	{ A: -0.06602091, B: -0.066084095 },
	{ A: 0.007364747, B: 0.004111321 },
	{ A: 0.039312658, B: 0.041160877 },
	{ A: -0.083996845, B: -0.084649672 },
	{ A: 0.005594323, B: -0.103236388 },
	{ A: 0.037738868, B: 0.047176278 },
	{ A: -0.051253132, B: -0.039271704 },
	{ A: -0.00608548, B: 0.024247543 },
	{ A: -0.060285288, B: -0.061263809 },
	{ A: 0.055639919, B: 0.049063404 },
	{ A: -0.063884598, B: -0.081516516 },
	{ A: -0.006266733, B: 0.017586674 },
	{ A: -0.050743205, B: -0.074971925 },
	{ A: 0.024002769, B: 0.020346134 },
	{ A: 0.064092419, B: 0.070990128 },
	{ A: 0.014881521, B: 0.057062228 },
	{ A: 0.000542882, B: -0.044862294 },
	{ A: -0.019233826, B: -0.000284836 },
	{ A: 0.020630135, B: 0.024560998 },
	{ A: 0.038778447, B: 0.033173696 },
	{ A: -0.056659496, B: -0.089575482 },
	{ A: 0.031337606, B: 0.029416965 },
	{ A: 0.029732506, B: 0.027298797 },
	{ A: 0.004263329, B: -0.020552561 },
	{ A: 0.047228108, B: 0.063907141 },
	{ A: -0.014438894, B: 0.036052143 },
	{ A: -0.070888792, B: -0.066829617 },
	{ A: 0.03787287, B: 0.009178978 },
	{ A: 0.026496257, B: 0.035994365 },
	{ A: 0.036273461, B: 0.059325942 },
	{ A: 0.022008174, B: 0.030618506 },
	{ A: 0.03179022, B: 0.057386439 },
	{ A: 0.049106105, B: 0.054814926 },
	{ A: -0.081877743, B: -0.090441992 },
	{ A: -0.059928797, B: -0.073977519 },
	{ A: -0.037545678, B: -0.108979234 },
	{ A: 0.046593469, B: 0.050114637 },
	{ A: -0.075339345, B: -0.078423781 },
	{ A: -0.05844674, B: -0.065928549 },
	{ A: -0.032698258, B: -0.032943101 },
	{ A: -0.067337293, B: -0.08991247 },
	{ A: 0.009059916, B: 0.03053853 },
	{ A: 0.083918234, B: -0.021001828 },
	{ A: 0.030040736, B: 0.037565176 },
	{ A: 0.048981315, B: -0.023697047 },
	{ A: -0.025496191, B: -0.033053363 },
	{ A: 0.023510247, B: 0.038265859 },
	{ A: 0.025614496, B: 0.034953699 },
	{ A: 0.033111053, B: 0.052998994 },
	{ A: 0.019290963, B: 0.053631294 },
	{ A: 0.006749405, B: 0.053862867 },
	{ A: -0.062024556, B: -0.083059411 },
	{ A: -0.06271718, B: -0.072924599 },
	{ A: -0.049776813, B: 0.038054485 },
	{ A: -0.016528857, B: -0.039155829 },
	{ A: -0.068169465, B: -0.071790237 },
	{ A: 0.030791036, B: 0.012276491 },
	{ A: 0.02881455, B: 0.030401057 },
	{ A: 0.047864783, B: 0.060823018 },
	{ A: 0.029650244, B: 0.025418633 },
	{ A: 0.030041459, B: 0.031497436 },
	{ A: 0.041176468, B: 0.034281508 },
	{ A: -0.005080196, B: -0.014080321 },
	{ A: -0.045815408, B: -0.065914086 },
	{ A: -0.064454371, B: -0.078578066 },
	{ A: 0.026388826, B: 0.038168307 },
	{ A: 0.031675483, B: 0.032524153 },
	{ A: 0.044648307, B: 0.0050528 },
	{ A: 0.043031158, B: 0.043660268 },
	{ A: -0.037890256, B: -0.060078538 },
	{ A: 0.03228008, B: 0.035283369 },
	{ A: 0.033303136, B: 0.037075619 },
	{ A: -0.072632066, B: -0.087945023 },
	{ A: 0.021478729, B: 0.033761217 },
	{ A: 0.023597827, B: 0.011830204 },
	{ A: -0.066460155, B: -0.068983452 },
	{ A: 0.049288055, B: 0.065178039 },
	{ A: -0.090497942, B: -0.087096252 },
	{ A: 0.043322235, B: 0.045037918 },
	{ A: 0.013617704, B: -0.001201782 },
	{ A: -0.031167441, B: -0.102961648 },
	{ A: -0.030946821, B: -0.089710598 },
	{ A: -0.067438659, B: -0.08016628 },
	{ A: -0.003252368, B: 0.002105197 },
	{ A: 0.059351521, B: 0.064118329 },
	{ A: -0.043431272, B: -0.044396196 },
	{ A: -0.004514408, B: -0.006484507 },
	{ A: 0.033237601, B: 0.025256926 },
	{ A: -0.06904339, B: -0.0595713 },
	{ A: -0.034441686, B: -0.008302812 },
	{ A: 0.025115969, B: 0.01909491 },
	{ A: -0.016110845, B: -0.051029943 },
	{ A: 0.048754905, B: 0.062052599 },
	{ A: 0.024272766, B: 0.008742519 },
	{ A: 0.039658326, B: -0.003475549 },
	{ A: 0.018018908, B: 0.019728658 },
	{ A: -0.005854011, B: -0.013098163 },
	{ A: 0.036724522, B: 0.039788436 },
];

const processedData = rawData.map((d) => ({
	x: +d.A,
	y: +d.B,
}));
const xAccessor = (d) => d.x;
const yAccessor = (d) => d.y;

// FUNCTION TO DRAW CHART
function drawChart() {
	// DEFINE VARIABLES
	// animation elements
	const duration = 5000;

	// DRAW CHART COMPONENTS
	const svg = d3
		.select(div)
		.append('svg')
		.attr('width', width)
		.attr('height', height);

	function setContourAttr(selection) {
		selection
			.attr('fill', 'transparent')
			.attr('stroke', 'rgb(140, 166, 140)')
			.attr('stroke-opacity', 0.2);
	}

	const g = svg.append('g');
	const g0 = g.append('g').call(setContourAttr);
	const g1 = g
		.append('g')
		.call(setContourAttr)
		.attr('transform', 'translate(2,2)');
	const g2 = g
		.append('g')
		.call(setContourAttr)
		.attr('transform', 'translate(4,4)');

	// PREP DATA
	// load and process data

	// initial set up of data
	const slices = [
		{ lower: 0, upper: 300 },
		{ lower: 25, upper: 325 },
		{ lower: 50, upper: 350 },
	];
	let data = processedData.slice(slices[0].lower, slices[0].upper);
	let prevData = data.slice(); // make copy for exit transition

	// FUNCTION TO UPDATE DATA
	function updateData(sliceIndex) {
		prevData = data.slice();
		data = processedData.slice(
			slices[sliceIndex].lower,
			slices[sliceIndex].upper
		);
	}

	// DEFINE SCALES
	let x = d3
		.scaleLinear()
		.domain(d3.extent(data, xAccessor))
		.range([margin.left, width - margin.right]);

	let y = d3
		.scaleLinear()
		.domain(d3.extent(data, yAccessor))
		.range([height - margin.bottom, margin.top]);

	let animation;
	// FUNCTION TO UPDATE CHART
	function updateChart() {
		// set consistent threshold
		const thresholds = 10;

		// define contour generator function
		const contourFunc = d3
			.contourDensity()
			.thresholds(thresholds)
			.x((d) => x(xAccessor(d)))
			.y((d) => y(yAccessor(d)))
			.size([width, height])
			.bandwidth([50]);

		// mark the points as entering or exiting
		const entering = data.map((d) => {
			return {
				...d,
				type: 'entering',
			};
		});
		const exiting = prevData.map((d) => {
			return {
				...d,
				type: 'exiting',
			};
		});

		// combine the entering and exiting points
		const allData = entering.concat(exiting);

		// start a global transition
		d3.transition()
			.duration(duration)
			.tween('contours', () => {
				return (tweenValue) => {
					const inverse = 1 - tweenValue;

					// set the weight accessor to return the tween value
					// entering/(exiting) gradually increases/(decreases) effect on contour generator
					contourFunc.weight((d) => {
						return d.type === 'entering' ? tweenValue : inverse;
					});

					// generate the contour data
					const contours = contourFunc(allData);

					// create reusable function to draw contours
					function drawContours(selection) {
						selection.data(contours).join('path').attr('stroke-width', 0.25);
						selection.exit().remove();
						selection.enter().append('path').style('opacity', 1);
						selection.attr('d', d3.geoPath());
					}

					// draw the contours

					g0.selectAll('path').call(drawContours);
					g1.selectAll('path').call(drawContours);
					g2.selectAll('path').call(drawContours);
				};
			});
	}

	let interval;

	function startAnimation() {
		let sliceIndex = 0;
		updateData(sliceIndex);
		updateChart();
		sliceIndex++;
		updateData(sliceIndex);
		updateChart();

		// RUN ANIMATION

		interval = setInterval(function () {
			sliceIndex++;
			if (sliceIndex == 3) {
				sliceIndex = 0;
			}
			updateData(sliceIndex);
			updateChart();
		}, duration);
	}

	startAnimation();

	// SET ZOOM
	// define zoom settings (specific to each [x, y] combo)
	let zoomSettings = [
		{
			name: 'L-BI',
			scale: 5,
			translateWidth: -width * 2.75,
			translateHeight: -height,
		},
		{
			name: 'mg-BI',
			scale: 5,
			translateWidth: -width / 2,
			translateHeight: -height,
		},
	];

	// set zoom function
	let zoom = d3.zoom().on('zoom', zoomed);

	svg
		.call(zoom)
		.call(
			zoom.transform,
			d3.zoomIdentity
				.translate(
					zoomSettings[0].translateWidth,
					zoomSettings[0].translateHeight
				)
				.scale(zoomSettings[0].scale)
		);

	function zoomed({ transform }) {
		g.attr('transform', transform);
	}

	// immediately disable user zoom & pan ability
	svg.on('.zoom', null);

	// UPDATE DIMENSIONS WHENEVER WINDOW IS RESIZED
	window.addEventListener('resize', () => {
		clearInterval(interval);
		svg.interrupt();
		width = div.clientWidth;
		height = div.clientHeight;
		svg.attr('width', width).attr('height', height);
		startAnimation();
	});
}

// CALL MAIN FUNCTION
drawChart();
